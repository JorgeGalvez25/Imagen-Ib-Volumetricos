unit DmSrv_Async;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ Do not modify this unit manually, or your changes will be lost when this   }
{ unit is regenerated the next time you compile the project.                 }
{----------------------------------------------------------------------------}

{$I Remobjects.inc}

interface

uses
  {vcl:} Classes, TypInfo,
  {RemObjects:} uROXMLIntf, uROClasses, uROTypes, uROClientIntf, uROAsync,
  {Project:} DmSrv_Intf;

type
  { ISrvDispensarios_Async }
  ISrvDispensarios_Async = interface(IROAsyncInterface)
    ['{1377A330-CF9A-4D4D-A81E-1B18C6250A38}']
    procedure Invoke_DameDispensarios;
    procedure Invoke_EjecutaComando(const xCmnd: String);
    procedure Invoke_ResultadoComando(const xFolio: Integer);
    function Retrieve_DameDispensarios: String;
    function Retrieve_EjecutaComando: Integer;
    function Retrieve_ResultadoComando: String;
  end;

  { CoSrvDispensarios_Async }
  CoSrvDispensarios_Async = class
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ISrvDispensarios_Async;
  end;

  { TSrvDispensarios_AsyncProxy }
  TSrvDispensarios_AsyncProxy = class(TROAsyncProxy, ISrvDispensarios_Async)
  private
  protected
    function __GetInterfaceName:string; override;

    procedure Invoke_DameDispensarios;
    procedure Invoke_EjecutaComando(const xCmnd: String);
    procedure Invoke_ResultadoComando(const xFolio: Integer);
    function Retrieve_DameDispensarios: String;
    function Retrieve_EjecutaComando: Integer;
    function Retrieve_ResultadoComando: String;
  end;

implementation

uses
  {vcl:} SysUtils;

{ CoSrvDispensarios }

class function CoSrvDispensarios_Async.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ISrvDispensarios_Async;
begin
  result := TSrvDispensarios_AsyncProxy.Create(aMessage, aTransportChannel);
end;

{ TSrvDispensarios_AsyncProxy }

function TSrvDispensarios_AsyncProxy.__GetInterfaceName:string;
begin
  result := 'SrvDispensarios';
end;

procedure TSrvDispensarios_AsyncProxy.Invoke_DameDispensarios;
begin
  __AssertProxyNotBusy('DameDispensarios');

  __Message.InitializeRequestMessage(__TransportChannel, 'DmSrv', __InterfaceName, 'DameDispensarios');
  __DispatchAsyncRequest('DameDispensarios',__Message);
end;

function TSrvDispensarios_AsyncProxy.Retrieve_DameDispensarios: String;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('DameDispensarios');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(String), Result, []);

  __response.Free();
end;

procedure TSrvDispensarios_AsyncProxy.Invoke_EjecutaComando(const xCmnd: String);
begin
  __AssertProxyNotBusy('EjecutaComando');

  __Message.InitializeRequestMessage(__TransportChannel, 'DmSrv', __InterfaceName, 'EjecutaComando');
  __Message.Write('xCmnd', TypeInfo(String), xCmnd, []);
  __DispatchAsyncRequest('EjecutaComando',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TSrvDispensarios_AsyncProxy.Retrieve_EjecutaComando: Integer;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('EjecutaComando');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(Integer), Result, []);

  __response.Free();
end;

procedure TSrvDispensarios_AsyncProxy.Invoke_ResultadoComando(const xFolio: Integer);
begin
  __AssertProxyNotBusy('ResultadoComando');

  __Message.InitializeRequestMessage(__TransportChannel, 'DmSrv', __InterfaceName, 'ResultadoComando');
  __Message.Write('xFolio', TypeInfo(Integer), xFolio, []);
  __DispatchAsyncRequest('ResultadoComando',__Message);
    __Message.UnsetAttributes(__TransportChannel);
end;

function TSrvDispensarios_AsyncProxy.Retrieve_ResultadoComando: String;
var __response:TStream;
begin
  __response := __RetrieveAsyncResponse('ResultadoComando');
  __Message.ReadFromStream(__response);

  __Message.Read('Result', TypeInfo(String), Result, []);

  __response.Free();
end;


initialization
end.
